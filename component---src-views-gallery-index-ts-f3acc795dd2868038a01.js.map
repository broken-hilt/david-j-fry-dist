{"version":3,"sources":["webpack:///./src/components/painting/painting.styled.tsx","webpack:///./src/components/painting/painting.component.tsx","webpack:///./src/components/painting/index.ts","webpack:///./src/components/pageHeader/pageHeader.styled.tsx","webpack:///./src/components/pageHeader/index.ts","webpack:///./src/components/pageHeader/pageHeader.component.tsx","webpack:///./src/views/gallery/gallery.styled.tsx","webpack:///./src/views/gallery/gallery.view.tsx","webpack:///./src/views/gallery/index.ts","webpack:///./src/components/image/image.styled.tsx","webpack:///./src/components/image/image.component.tsx","webpack:///./src/components/image/index.ts"],"names":["PaintingStyled","styled","Link","validateProps","css","withPrefix","Painting","props","image","PaintingSchema","name","title","url_webp","artMedium","medium","contentLocation","location","schema","to","url","className","PageHeaderStyled","div","theme","typeStyles","h1","spacer","PageHeader","narrow","content","html","GalleryStyled","Gallery","pageContext","paintings","size","columns","xsmall","mlarge","gutter","base","map","painting","key","id","ImageStyled","picture","Image","ImageSchema","contentUrl","description","altText","type","srcSet","url_jpg","src","alt","width","height"],"mappings":"wJA+FeA,EA1FQC,YAAOC,QAAV,qFAAGD,CAAH,SAChB,WAKA,OAFAE,YAAc,iBAAD,iBAFC,KAIPC,YAAP,ojCA0C8BC,qBAAW,8B,wBCd9BC,EA9BE,SAACC,GAOhB,IAAKA,EAAMC,MAAO,OAAO,KAEzB,IAAMC,EAAiD,CACrD,QAAS,WACTC,KAAMH,EAAMI,MACZH,MAAOD,EAAMC,MAAMI,SACnBC,UAAWN,EAAMO,OACjBC,gBAAiBR,EAAMS,UAGzB,OACE,oCACE,kBAAC,IAAD,CAAWC,OAAQR,IACnB,kBAAC,EAAD,CAAgBS,GAAIX,EAAMY,KACxB,yBAAKC,UAAU,cACb,kBAAC,IAAUb,EAAMC,QAEnB,yBAAKY,UAAU,SAASb,EAAMI,UChCvBL,O,8HCyBAe,EArBUpB,IAAOqB,IAAV,qFAAGrB,CAAH,SAGlB,YAAe,MAAZsB,EAAY,EAAZA,MACGhB,EAAQ,CACZI,MAAOY,SAAF,UAAEA,EAAOC,kBAAT,aAAE,EAAmBC,IAK5B,OAFAtB,YAAc,mBAAD,iBAA0BI,IAEhCH,YAAP,8BAEMG,EAAMI,MAGNe,YAAO,cCnBFC,ECKI,SAACpB,GAClB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAWqB,QAAM,GACf,wBAAIR,UAAU,SAASb,EAAMI,OAC5BJ,EAAMsB,SAAW,kBAAC,IAAD,CAAQT,UAAU,UAAUU,KAAMvB,EAAMsB,a,YCQnDE,EAdO9B,IAAOqB,IAAV,+EAAGrB,CAAH,SAGf,WAKA,OAFAE,YAAc,gBAAD,iBAFC,KAIPC,YAAP,QACIsB,YAAO,QAAS,0BCwBTM,EA/BC,SAACzB,GAAiD,MAC1BA,EAAM0B,YAApCJ,EADwD,EACxDA,QAASK,EAD+C,EAC/CA,UAAWvB,EADoC,EACpCA,MAE5B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYA,MAAOA,EAAOkB,QAASA,IAEnC,kBAAC,IAAD,CAAQM,KAAK,SACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAS,CAAEC,OAAQ,EAAGC,OAAQ,GAC9BC,OAAQ,CAAEC,KAAM,SAAUH,OAAQ,WAEjCH,GACCA,EAAUO,KAAI,SAACC,GAAD,OACZ,kBAAC,IAAD,CACEC,IAAKD,EAASE,GACdpC,MAAOkC,EAASlC,MAChBQ,SAAU0B,EAAS1B,SACnBF,OAAQ4B,EAAS5B,OACjBH,MAAO+B,EAAS/B,MAChBQ,IAAKuB,EAASvB,cC3BjBa,a,+FCeAa,EAZK5C,IAAO6C,QAAV,+EAAG7C,CAAH,SAGb,WAKA,OAFAE,YAAc,cAAD,iBAFC,KAIPC,YAAP,SCuBW2C,EA3BD,SAACxC,GACb,IAAMyC,EAA2C,CAC/C,QAAS,cACTC,WAAY1C,EAAMK,SAClBsC,YAAa3C,EAAM4C,QACnBzC,KAAMH,EAAMI,OAASJ,EAAM4C,SAK7B,OAFI5C,EAAMS,WAAUgC,EAAYjC,gBAAkBR,EAAMS,UAGtD,oCACE,kBAAC,IAAD,CAAWC,OAAQ+B,IACnB,kBAAC,EAAD,KACE,4BAAQI,KAAK,aAAaC,OAAQ9C,EAAMK,WACxC,4BAAQwC,KAAK,aAAaC,OAAQ9C,EAAM+C,UACxC,yBACEC,IAAKhD,EAAM+C,QACXE,IAAKjD,EAAM4C,QACXM,MAAOlD,EAAMkD,MACbC,OAAQnD,EAAMmD,YC3BTX","file":"component---src-views-gallery-index-ts-f3acc795dd2868038a01.js","sourcesContent":["import { Link, withPrefix } from 'gatsby';\nimport styled, { css } from 'styled-components';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst PaintingStyled = styled(Link)`\n  ${() => {\n    const props = {};\n\n    validateProps('PaintingStyled', { ...props });\n\n    return css`\n      display: block;\n      padding: 1.6rem 1.6rem 3.2rem;\n      background: #fff;\n      text-decoration: none;\n      box-shadow: 0 0.4rem 4rem rgb(0 0 0 / 20%);\n      border-radius: 0.8rem;\n      text-align: right;\n      color: #222;\n      height: 100%;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n\n      .image-wrap {\n        position: relative;\n        font-size: 0;\n        line-height: 0;\n        overflow: hidden;\n\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background: rgba(0, 0, 0, 0.15);\n          opacity: 0;\n          z-index: 2;\n          transition: all 0.5s ease-in-out;\n        }\n\n        &::after {\n          content: '';\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          width: 40px;\n          height: 40px;\n          background-color: rgba(0, 0, 0, 0.5);\n          background-image: url(${withPrefix('/images/visibility.svg')});\n          background-size: 32px 32px;\n          background-position: center center;\n          background-repeat: no-repeat;\n          opacity: 0;\n          z-index: 3;\n          transition: all 0.5s ease-in-out;\n          transform: translate(-50%, -50%) scale(0.9);\n          border-radius: 50%;\n        }\n      }\n\n      img {\n        transition: all 0.5s ease-in-out;\n        transform: scale(1);\n      }\n\n      &:hover {\n        box-shadow: 0 0.4rem 4rem rgb(0 0 0 / 35%);\n\n        .image-wrap {\n          &::before {\n            opacity: 1;\n          }\n          &::after {\n            opacity: 1;\n            transform: translate(-50%, -50%) scale(1);\n          }\n        }\n        // img {\n        //   transform: scale(1.025);\n        // }\n      }\n\n      .title {\n        font-weight: bold;\n        margin-top: 0.8rem;\n      }\n    `;\n  }}\n`;\n\nexport default PaintingStyled;\n","import React from 'react';\n\nimport { ContentTypes } from '~/schema/types';\n\nimport PaintingStyled from './painting.styled';\nimport Image from '../image';\nimport SchemaOrg from '../schemaOrg';\nimport { SchemaOrgTypes } from '../schemaOrg/schemaOrg.types';\n\nconst Painting = (props: {\n  image: ContentTypes.Image;\n  location: string;\n  medium: string;\n  title: string;\n  url: string;\n}) => {\n  if (!props.image) return null;\n\n  const PaintingSchema: SchemaOrgTypes.Schema_Painting = {\n    '@type': 'Painting',\n    name: props.title,\n    image: props.image.url_webp,\n    artMedium: props.medium,\n    contentLocation: props.location,\n  };\n\n  return (\n    <>\n      <SchemaOrg schema={PaintingSchema} />\n      <PaintingStyled to={props.url}>\n        <div className=\"image-wrap\">\n          <Image {...props.image} />\n        </div>\n        <div className=\"title\">{props.title}</div>\n      </PaintingStyled>\n    </>\n  );\n};\n\nexport default Painting;\n","import Painting from './painting.component';\nexport default Painting;\n","import styled, { css } from 'styled-components';\nimport { spacer } from '~/theme/patterns';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst PageHeaderStyled = styled.div<{\n  theme?: object;\n}>`\n  ${({ theme }) => {\n    const props = {\n      title: theme?.typeStyles?.h1,\n    };\n\n    validateProps('PageHeaderStyled', { ...props });\n\n    return css`\n      .title {\n        ${props.title};\n      }\n      .content {\n        ${spacer('medium')}\n      }\n    `;\n  }}\n`;\n\nexport default PageHeaderStyled;\n","import PageHeader from './pageHeader.component';\nexport default PageHeader;\n","import React from 'react';\nimport { Container } from '../layout';\nimport Markup from '../markup';\n\nimport PageHeaderStyled from './pageHeader.styled';\n\nconst PageHeader = (props: { content?: string; title: string }) => {\n  return (\n    <PageHeaderStyled>\n      <Container narrow>\n        <h1 className=\"title\">{props.title}</h1>\n        {props.content && <Markup className=\"content\" html={props.content} />}\n      </Container>\n    </PageHeaderStyled>\n  );\n};\n\nexport default PageHeader;\n","import styled, { css } from 'styled-components';\nimport { spacer } from '~/theme/patterns';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst GalleryStyled = styled.div<{\n  theme?: object;\n}>`\n  ${() => {\n    const props = {};\n\n    validateProps('GalleryStyled', { ...props });\n\n    return css`\n      ${spacer('large', 'padding-top-bottom')}\n    `;\n  }}\n`;\n\nexport default GalleryStyled;\n","import React from 'react';\nimport { ContentTypes } from '~/schema/types';\nimport PageHeader from '~/components/pageHeader';\nimport { Container, FlexGrid, Spacer } from '~/components/layout';\nimport Painting from '~/components/painting';\nimport GalleryStyled from './gallery.styled';\n\nconst Gallery = (props: { pageContext: ContentTypes.Gallery }) => {\n  const { content, paintings, title } = props.pageContext;\n\n  return (\n    <GalleryStyled>\n      <PageHeader title={title} content={content} />\n\n      <Spacer size=\"large\">\n        <Container>\n          <FlexGrid\n            columns={{ xsmall: 2, mlarge: 4 }}\n            gutter={{ base: '0.8rem', xsmall: '1.6rem' }}\n          >\n            {paintings &&\n              paintings.map((painting: ContentTypes.Painting) => (\n                <Painting\n                  key={painting.id}\n                  image={painting.image}\n                  location={painting.location}\n                  medium={painting.medium}\n                  title={painting.title}\n                  url={painting.url}\n                />\n              ))}\n          </FlexGrid>\n        </Container>\n      </Spacer>\n    </GalleryStyled>\n  );\n};\n\nexport default Gallery;\n","import Gallery from './gallery.view';\nexport default Gallery;\n","import styled, { css } from 'styled-components';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst ImageStyled = styled.picture<{\n  theme?: object;\n}>`\n  ${() => {\n    const props = {};\n\n    validateProps('ImageStyled', { ...props });\n\n    return css``;\n  }}\n`;\n\nexport default ImageStyled;\n","import React from 'react';\n\nimport { ContentTypes } from '~/schema/types';\nimport SchemaOrg from '../schemaOrg';\nimport { SchemaOrgTypes } from '../schemaOrg/schemaOrg.types';\n\nimport ImageStyled from './image.styled';\n\nconst Image = (props: ContentTypes.Image) => {\n  const ImageSchema: SchemaOrgTypes.Schema_Image = {\n    '@type': 'ImageObject',\n    contentUrl: props.url_webp,\n    description: props.altText,\n    name: props.title || props.altText,\n  };\n\n  if (props.location) ImageSchema.contentLocation = props.location;\n\n  return (\n    <>\n      <SchemaOrg schema={ImageSchema} />\n      <ImageStyled>\n        <source type=\"image/webp\" srcSet={props.url_webp} />\n        <source type=\"image/jpeg\" srcSet={props.url_jpg} />\n        <img\n          src={props.url_jpg}\n          alt={props.altText}\n          width={props.width}\n          height={props.height}\n        />\n      </ImageStyled>\n    </>\n  );\n};\n\nexport default Image;\n","import Image from './image.component';\nexport default Image;\n"],"sourceRoot":""}