{"version":3,"sources":["webpack:///./src/components/painting/painting.styled.tsx","webpack:///./src/components/painting/painting.component.tsx","webpack:///./src/components/painting/index.ts","webpack:///./src/components/button/button.styled.tsx","webpack:///./src/components/button/index.ts","webpack:///./src/components/button/button.component.tsx","webpack:///./src/components/intro/intro.styled.tsx","webpack:///./src/components/intro/index.ts","webpack:///./src/components/intro/intro.component.tsx","webpack:///./src/components/latest/latest.styled.tsx","webpack:///./src/components/latest/index.ts","webpack:///./src/components/latest/latest.component.tsx","webpack:///./src/views/home/home.view.tsx","webpack:///./src/views/home/index.ts","webpack:///./src/components/image/image.styled.tsx","webpack:///./src/components/image/image.component.tsx","webpack:///./src/components/image/index.ts"],"names":["PaintingStyled","styled","Link","validateProps","css","withPrefix","Painting","props","image","PaintingSchema","name","title","url_webp","artMedium","medium","contentLocation","location","schema","to","url","className","ButtonStyled","theme","backgroundColor","button","textColor","Button","label","IntroStyled","div","titleStyles","typeStyles","h2","mq","xsmall","smedium","large","Intro","html","content","content_page_schema","paintings","path","LatestStyled","spacer","Latest","size","columns","mlarge","gutter","base","map","painting","key","id","Home","pageContext","featured","length","HomeView","ImageStyled","picture","Image","ImageSchema","contentUrl","description","altText","type","srcSet","url_jpg","src","alt","width","height"],"mappings":"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","file":"component---src-views-home-index-ts-c910056eabd4d4f2ad9c.js","sourcesContent":["import { Link, withPrefix } from 'gatsby';\nimport styled, { css } from 'styled-components';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst PaintingStyled = styled(Link)`\n  ${() => {\n    const props = {};\n\n    validateProps('PaintingStyled', { ...props });\n\n    return css`\n      display: block;\n      padding: 1.6rem 1.6rem 3.2rem;\n      background: #fff;\n      text-decoration: none;\n      box-shadow: 0 0.4rem 4rem rgb(0 0 0 / 20%);\n      border-radius: 0.8rem;\n      text-align: right;\n      color: #222;\n      height: 100%;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n\n      .image-wrap {\n        position: relative;\n        font-size: 0;\n        line-height: 0;\n        overflow: hidden;\n\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background: rgba(0, 0, 0, 0.15);\n          opacity: 0;\n          z-index: 2;\n          transition: all 0.5s ease-in-out;\n        }\n\n        &::after {\n          content: '';\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          width: 40px;\n          height: 40px;\n          background-color: rgba(0, 0, 0, 0.5);\n          background-image: url(${withPrefix('/images/visibility.svg')});\n          background-size: 32px 32px;\n          background-position: center center;\n          background-repeat: no-repeat;\n          opacity: 0;\n          z-index: 3;\n          transition: all 0.5s ease-in-out;\n          transform: translate(-50%, -50%) scale(0.9);\n          border-radius: 50%;\n        }\n      }\n\n      img {\n        transition: all 0.5s ease-in-out;\n        transform: scale(1);\n      }\n\n      &:hover {\n        box-shadow: 0 0.4rem 4rem rgb(0 0 0 / 35%);\n\n        .image-wrap {\n          &::before {\n            opacity: 1;\n          }\n          &::after {\n            opacity: 1;\n            transform: translate(-50%, -50%) scale(1);\n          }\n        }\n        // img {\n        //   transform: scale(1.025);\n        // }\n      }\n\n      .title {\n        font-weight: bold;\n        margin-top: 0.8rem;\n      }\n    `;\n  }}\n`;\n\nexport default PaintingStyled;\n","import React from 'react';\n\nimport { ContentTypes } from '~/schema/types';\n\nimport PaintingStyled from './painting.styled';\nimport Image from '../image';\nimport SchemaOrg from '../schemaOrg';\nimport { SchemaOrgTypes } from '../schemaOrg/schemaOrg.types';\n\nconst Painting = (props: {\n  image: ContentTypes.Image;\n  location: string;\n  medium: string;\n  title: string;\n  url: string;\n}) => {\n  if (!props.image) return null;\n\n  const PaintingSchema: SchemaOrgTypes.Schema_Painting = {\n    '@type': 'Painting',\n    name: props.title,\n    image: props.image.url_webp,\n    artMedium: props.medium,\n    contentLocation: props.location,\n  };\n\n  return (\n    <>\n      <SchemaOrg schema={PaintingSchema} />\n      <PaintingStyled to={props.url}>\n        <div className=\"image-wrap\">\n          <Image {...props.image} />\n        </div>\n        <div className=\"title\">{props.title}</div>\n      </PaintingStyled>\n    </>\n  );\n};\n\nexport default Painting;\n","import Painting from './painting.component';\nexport default Painting;\n","import { Link } from 'gatsby';\nimport styled, { css } from 'styled-components';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst ButtonStyled = styled(Link)<{\n  to: string;\n}>`\n  ${({ theme }) => {\n    const props = {\n      backgroundColor: theme?.button?.backgroundColor,\n      textColor: theme?.button?.textColor,\n    };\n\n    validateProps('ButtonStyled', { ...props });\n\n    return css`\n      position: relative;\n      display: inline-block;\n      padding: 0.8rem 4rem 0.8rem 2.4rem;\n      background: ${props.backgroundColor};\n      color: ${props.textColor};\n      text-transform: uppercase;\n      text-decoration: none;\n      opacity: 1;\n      transition: opacity 400ms ease-out;\n      border-radius: 2rem;\n      box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.4);\n\n      &::after {\n        content: '';\n        position: absolute;\n        transform: rotate(45deg) translateY(-50%);\n        border: 0.2rem solid;\n        border-left: none;\n        border-bottom: none;\n        width: 0.8rem;\n        height: 0.8rem;\n        top: 50%;\n        right: 2.4rem;\n        transition: right 400ms;\n      }\n\n      &:hover {\n        opacity: 0.8;\n        color: ${props.textColor};\n\n        &::after {\n          right: 1.6rem;\n        }\n      }\n    `;\n  }}\n`;\n\nexport default ButtonStyled;\n","import Button from './button.component';\nexport default Button;\n","import React from 'react';\n\nimport ButtonStyled from './button.styled';\n\nconst Button = (props: { className?: string; label: string; url: string }) => {\n  return (\n    <ButtonStyled className={props.className} to={props.url}>\n      {props.label}\n    </ButtonStyled>\n  );\n};\n\nexport default Button;\n","import styled, { css } from 'styled-components';\nimport validateProps from '~/utils/validateProps';\nimport { mq } from '~/theme/patterns';\n\nconst IntroStyled = styled.div`\n  ${({ theme }) => {\n    const props = {\n      titleStyles: theme?.typeStyles?.h2,\n    };\n\n    validateProps('IntroStyled', { ...props });\n\n    return css`\n      max-width: 60rem;\n      margin: auto;\n      @media ${mq.medium} {\n        max-width: 100%;\n      }\n\n      .image {\n        img {\n          display: block;\n          width: 100%;\n        }\n\n        &__inner {\n          width: 100%;\n        }\n      }\n\n      .content {\n        position: relative;\n        z-index: 2;\n        margin-top: -6.4rem;\n        padding: 0 1.6rem;\n\n        @media ${mq.xsmall} {\n          margin-top: -12rem;\n        }\n\n        @media ${mq.smedium} {\n          margin-top: -16rem;\n        }\n\n        &__inner {\n          width: 100%;\n          padding: 2.4rem 1.6rem;\n          background-color: #fff;\n          border-radius: 0.8rem;\n          box-shadow: 0 0.4rem 4rem rgb(0 0 0 / 20%);\n\n          @media ${mq.smedium} {\n            padding: 3.2rem;\n          }\n\n          @media ${mq.medium} {\n            padding: 6.4rem;\n          }\n\n          @media ${mq.large} {\n            padding: 6.4rem 10.4rem;\n          }\n        }\n      }\n\n      .title {\n        ${props.titleStyles}\n      }\n\n      .markup {\n        margin-top: 2.4rem;\n      }\n\n      .cta {\n        display: inline-block;\n        margin-top: 3.2rem;\n        text-decoration: none;\n        text-transform: uppercase;\n        font-weight: bold;\n      }\n\n      @media ${mq.medium} {\n        .inner {\n          margin-left: -${100 / 12}%;\n          margin-right: -${100 / 12}%;\n          display: flex;\n        }\n\n        .image {\n          flex-basis: 50%;\n          margin-top: 5.6rem;\n\n          &__inner {\n            margin-left: ${100 / 7}%;\n          }\n        }\n\n        .content {\n          margin-top: 0;\n          flex-basis: 50%;\n          padding: 0;\n\n          &__inner {\n            margin-left: -${100 / 7}%;\n          }\n        }\n      }\n    `;\n  }}\n`;\n\nexport default IntroStyled;\n","import Intro from './intro.component';\nexport default Intro;\n","import React from 'react';\n\nimport Button from '../button';\nimport { Container } from '~/components/layout';\n\nimport IntroStyled from './intro.styled';\nimport { ContentTypes } from '~/schema/types';\nimport Markup from '../markup';\nimport { content_page_schema } from '~/schema/site.schema';\nimport Image from '../image';\n\nconst Intro = (props: {\n  content: string;\n  image: ContentTypes.Image;\n  title: string;\n}) => {\n  return (\n    <Container>\n      <IntroStyled>\n        <div className=\"inner\">\n          <div className=\"image\">\n            <div className=\"image__inner\">\n              <Image {...props.image} />\n            </div>\n          </div>\n          <div className=\"content\">\n            <div className=\"content__inner\">\n              <h2 className=\"title\">{props.title}</h2>\n              <Markup className=\"markup\" html={props.content} />\n              <Button\n                className=\"cta\"\n                url={content_page_schema.paintings.path}\n                label={`Go to paintings & prints gallery`}\n              />\n            </div>\n          </div>\n        </div>\n      </IntroStyled>\n    </Container>\n  );\n};\n\nexport default Intro;\n","import styled, { css } from 'styled-components';\nimport { spacer } from '~/theme/patterns';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst LatestStyled = styled.div<{\n  theme?: object;\n}>`\n  ${({ theme }) => {\n    const props = {\n      titleStyles: theme?.typeStyles?.h2,\n    };\n\n    validateProps('LatestStyled', { ...props });\n\n    return css`\n      background-color: #333;\n      ${spacer('large', 'padding-top-bottom')}\n\n      .latest-title {\n        ${props.titleStyles}\n        color: #fff;\n        text-align: center;\n      }\n\n      .cta {\n        ${spacer('medium')}\n        text-align: center;\n      }\n    `;\n  }}\n`;\n\nexport default LatestStyled;\n","import Latest from './latest.component';\nexport default Latest;\n","import React from 'react';\n\nimport Button from '../button';\nimport { Container, FlexGrid, Spacer } from '../layout';\nimport Painting from '../painting';\n\nimport LatestStyled from './latest.styled';\n\nimport { content_page_schema } from '~/schema/site.schema';\nimport { ContentTypes } from '~/schema/types';\n\nconst Latest = (props: { paintings: ContentTypes.Painting[] }) => {\n  return (\n    <LatestStyled>\n      <Container>\n        <h2 className=\"latest-title\">Latest Paintings</h2>\n        <Spacer size=\"medium\">\n          <FlexGrid\n            columns={{ xsmall: 2, mlarge: 4 }}\n            gutter={{ base: '0.8rem', xsmall: '1.6rem' }}\n          >\n            {props.paintings &&\n              props.paintings.map((painting: ContentTypes.Painting) => (\n                <Painting\n                  key={painting.id}\n                  image={painting.image}\n                  location={painting.location}\n                  medium={painting.medium}\n                  title={painting.title}\n                  url={`paintings/${painting.url}`}\n                />\n              ))}\n          </FlexGrid>\n        </Spacer>\n        <div className=\"cta\">\n          <Button\n            label=\"View all paintings and prints\"\n            url={content_page_schema.paintings.path}\n          />\n        </div>\n      </Container>\n    </LatestStyled>\n  );\n};\n\nexport default Latest;\n","import React from 'react';\n\nimport Intro from '~/components/intro';\nimport { Spacer } from '~/components/layout';\n\nimport Latest from '~/components/latest';\nimport { ContentTypes } from '~/schema/types';\n\nconst Home = (props: { pageContext: ContentTypes.Home }) => {\n  const { content, image, featured, title } = props.pageContext;\n\n  return (\n    <>\n      <Spacer size=\"large\">\n        <Intro content={content} image={image} title={title} />\n      </Spacer>\n      {featured && featured.length > 0 && (\n        <Spacer size=\"large\">\n          <Latest paintings={featured} />\n        </Spacer>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import HomeView from './home.view';\nexport default HomeView;\n","import styled, { css } from 'styled-components';\n// import { mq } from '~/theme/patterns';\nimport validateProps from '~/utils/validateProps';\n\nconst ImageStyled = styled.picture<{\n  theme?: object;\n}>`\n  ${() => {\n    const props = {};\n\n    validateProps('ImageStyled', { ...props });\n\n    return css``;\n  }}\n`;\n\nexport default ImageStyled;\n","import React from 'react';\n\nimport { ContentTypes } from '~/schema/types';\nimport SchemaOrg from '../schemaOrg';\nimport { SchemaOrgTypes } from '../schemaOrg/schemaOrg.types';\n\nimport ImageStyled from './image.styled';\n\nconst Image = (props: ContentTypes.Image) => {\n  const ImageSchema: SchemaOrgTypes.Schema_Image = {\n    '@type': 'ImageObject',\n    contentUrl: props.url_webp,\n    description: props.altText,\n    name: props.title || props.altText,\n  };\n\n  if (props.location) ImageSchema.contentLocation = props.location;\n\n  return (\n    <>\n      <SchemaOrg schema={ImageSchema} />\n      <ImageStyled>\n        <source type=\"image/webp\" srcSet={props.url_webp} />\n        <source type=\"image/jpeg\" srcSet={props.url_jpg} />\n        <img\n          src={props.url_jpg}\n          alt={props.altText}\n          width={props.width}\n          height={props.height}\n        />\n      </ImageStyled>\n    </>\n  );\n};\n\nexport default Image;\n","import Image from './image.component';\nexport default Image;\n"],"sourceRoot":""}